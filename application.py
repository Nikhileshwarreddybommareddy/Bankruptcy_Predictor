import streamlit as st
import pandas as pd
import numpy as np
import pickle
import os
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

# Set page configuration
st.set_page_config(
    page_title="Company Bankruptcy Predictor",
    page_icon="ðŸ’¼",
    layout="wide"
)

# App title and description
st.title("ðŸ’¼ Company Bankruptcy Predictor")
st.markdown("""
This app predicts whether a company is at risk of bankruptcy based on various financial ratios using a pre-trained model.
Enter the company's financial information below to get a prediction.
""")

# Function to load pre-trained model and preprocessor
@st.cache_resource
def load_model():
    project_root = Path(__file__).resolve().parent
    model_path = project_root / "artifacts/best_model.pkl"
    preprocessor_path = project_root / "artifacts/proprocessor.pkl"
    
    try:
        model = pickle.load(open(model_path, 'rb'))
        preprocessor = pickle.load(open(preprocessor_path, 'rb'))
        return model, preprocessor
    except Exception as e:
        st.error(f"Error loading model: {e}")
        return None, None

# Load pre-trained model and preprocessor
model, preprocessor = load_model()

# Check if model loaded successfully
if model is None or preprocessor is None:
    st.error("Failed to load the model or preprocessor. Please check that the files exist in the artifacts directory.")
    st.stop()

# Create the prediction interface
st.header("Enter Company Financial Ratios")

# Create two columns for input fields
col1, col2 = st.columns(2)

with col1:
    borrowing_dependency = st.number_input(
        "Borrowing Dependency:",
        min_value=0.0,
        max_value=5.0,
        value=0.3,
        help="Company's reliance on borrowed funds"
    )
    
    current_liability_to_assets = st.number_input(
        "Current Liability to Current Assets:",
        min_value=0.0,
        max_value=10.0,
        value=0.5,
        help="Ratio of short-term obligations to short-term assets"
    )
    
    debt_ratio = st.number_input(
        "Debt Ratio (%):",
        min_value=0.0,
        max_value=100.0,
        value=40.0,
        help="Percentage of assets financed by debt"
    )
    
    net_income_to_equity = st.number_input(
        "Net Income to Stockholder's Equity:",
        min_value=-1.0,
        max_value=2.0,
        value=0.1,
        help="Return on Equity (ROE)"
    )
    
    net_value_per_share = st.number_input(
        "Net Value Per Share (A):",
        min_value=0.0,
        max_value=1000.0,
        value=20.0,
        help="Book value per share"
    )

with col2:
    net_profit_to_capital = st.number_input(
        "Net Profit before Tax / Paid-in Capital:",
        min_value=-1.0,
        max_value=2.0,
        value=0.15,
        help="Profit generated by each unit of invested capital"
    )
    
    operating_gross_margin = st.number_input(
        "Operating Gross Margin:",
        min_value=-1.0,
        max_value=1.0,
        value=0.25,
        help="Profitability of core operations"
    )
    
    per_share_net_profit = st.number_input(
        "Per Share Net Profit before Tax (Yuan Â¥):",
        min_value=-10.0,
        max_value=100.0,
        value=2.5,
        help="Earnings per share before tax"
    )
    
    persistent_eps = st.number_input(
        "Persistent EPS in the Last Four Seasons:",
        min_value=-10.0,
        max_value=20.0,
        value=1.2,
        help="Average EPS over last four quarters"
    )
    
    roa_before_interest = st.number_input(
        "ROA before Interest and % after Tax:",
        min_value=-1.0,
        max_value=1.0,
        value=0.08,
        help="Return on assets before interest and taxes"
    )
    
    working_capital_to_assets = st.number_input(
        "Working Capital to Total Assets:",
        min_value=-1.0,
        max_value=1.0,
        value=0.2,
        help="Proportion of total assets funded by working capital"
    )

# Create prediction button
predict_button = st.button("Predict Bankruptcy Risk", type="primary")

# Make prediction when button is clicked
if predict_button:
    # Create input dataframe
    input_data = pd.DataFrame({
        ' Borrowing dependency': [borrowing_dependency],
        ' Current Liability to Current Assets': [current_liability_to_assets],
        ' Debt ratio %': [debt_ratio],
        " Net Income to Stockholder's Equity": [net_income_to_equity],
        ' Net Value Per Share (A)': [net_value_per_share],
        ' Net profit before tax/Paid-in capital': [net_profit_to_capital],
        ' Operating Gross Margin': [operating_gross_margin],
        ' Per Share Net profit before tax (Yuan Â¥)': [per_share_net_profit],
        ' Persistent EPS in the Last Four Seasons': [persistent_eps],
        ' ROA(A) before interest and % after tax': [roa_before_interest],
        ' Working Capital to Total Assets': [working_capital_to_assets]
    })
    
    # Display the input data
    st.subheader("Input Data")
    st.dataframe(input_data)
    
    # Transform using preprocessor and make prediction
    try:
        X_processed = preprocessor.transform(input_data)
        prediction = model.predict(X_processed)
        
        # Display result
        st.subheader("Prediction Result")
        
        # Since we're using a regression model, we'll interpret the prediction value
        # For regression models, we typically set a threshold to determine bankruptcy risk
        # Let's assume values > 0.5 indicate high risk (adjust threshold as needed)
        threshold = 0.5
        
        if prediction[0] > threshold:
            st.error(f"Bankruptcy Risk: High (Score: {prediction[0]:.2f})")
        else:
            st.success(f"Bankruptcy Risk: Low (Score: {prediction[0]:.2f})")
        
        # Create a gauge chart for visualization
        fig, ax = plt.subplots(figsize=(10, 2))
        
        # For regression models, we'll normalize the prediction to a 0-1 scale
        # Assuming bankruptcy scores typically fall between 0 and 1
        # If your model outputs values in a different range, adjust accordingly
        normalized_score = min(max(prediction[0], 0), 1)
        
        # Set up the gauge scale
        ax.set_xlim(0, 1)
        ax.set_ylim(0, 1)
        
        # Draw the gauge
        ax.barh(0.5, 1, height=0.4, color='lightgray', alpha=0.5)
        
        # Color based on risk level
        if normalized_score >= 0.7:
            bar_color = 'red'
        elif normalized_score >= 0.3:
            bar_color = 'orange'
        else:
            bar_color = 'green'
            
        ax.barh(0.5, normalized_score, height=0.4, color=bar_color)
        
        # Add markers and text
        for i in np.arange(0, 1.1, 0.1):
            ax.axvline(i, ymin=0.35, ymax=0.65, color='gray', alpha=0.3)
            ax.text(i, 0.2, f"{i:.1f}", ha='center')
        
        # Add the prediction text
        ax.text(normalized_score, 0.8, f"{prediction[0]:.2f}", ha='center', 
                bbox=dict(facecolor='white', alpha=0.8))
        
        # Remove axes
        ax.set_axis_off()
        
        # Set title
        ax.set_title("Bankruptcy Risk Score")
        
        # Display the chart
        st.pyplot(fig)
        
        # Risk level interpretation based on the prediction value
        if normalized_score >= 0.7:
            risk_level = "High Risk"
            color = "red"
        elif normalized_score >= 0.5:
            risk_level = "Moderate to High Risk"
            color = "darkorange"
        elif normalized_score >= 0.3:
            risk_level = "Moderate Risk"
            color = "orange"
        elif normalized_score >= 0.1:
            risk_level = "Low to Moderate Risk"
            color = "blue"
        else:
            risk_level = "Low Risk"
            color = "green"
        
        st.markdown(f"<h3 style='color:{color}'>Risk Assessment: {risk_level}</h3>", unsafe_allow_html=True)
        
        # Add key factor analysis
        st.subheader("Key Financial Factors")
        
        if prediction[0] > threshold:
            st.write("Potential risk factors identified:")
            risk_factors = []
            
            if debt_ratio > 60:
                risk_factors.append("- High debt ratio (over 60%)")
            if current_liability_to_assets > 0.8:
                risk_factors.append("- High current liability to current assets ratio")
            if borrowing_dependency > 0.5:
                risk_factors.append("- Significant borrowing dependency")
            if operating_gross_margin < 0.1:
                risk_factors.append("- Low operating gross margin")
            if working_capital_to_assets < 0:
                risk_factors.append("- Negative working capital to total assets ratio")
            if net_income_to_equity < 0:
                risk_factors.append("- Negative return on equity")
            
            if risk_factors:
                for factor in risk_factors:
                    st.write(factor)
            else:
                st.write("- Multiple financial indicators suggesting bankruptcy risk")
                
            # Recommendations
            st.subheader("Recommended Actions")
            st.write("Consider implementing the following measures:")
            st.write("- Review and potentially restructure debt obligations")
            st.write("- Improve working capital management")
            st.write("- Focus on increasing operational efficiency and gross margins")
            st.write("- Consider strategic alternatives such as asset sales or equity financing")
            st.write("- Consult with financial restructuring professionals")
        else:
            st.write("Positive financial indicators:")
            positive_factors = []
            
            if debt_ratio < 40:
                positive_factors.append("- Healthy debt ratio (under 40%)")
            if current_liability_to_assets < 0.5:
                positive_factors.append("- Good balance between current liabilities and assets")
            if operating_gross_margin > 0.2:
                positive_factors.append("- Strong operating gross margin")
            if working_capital_to_assets > 0.1:
                positive_factors.append("- Positive working capital to total assets ratio")
            if net_income_to_equity > 0.05:
                positive_factors.append("- Solid return on equity")
            
            if positive_factors:
                for factor in positive_factors:
                    st.write(factor)
            else:
                st.write("- Overall balanced financial indicators")
                
            # Recommendations
            st.subheader("Recommendations")
            st.write("To maintain financial health:")
            st.write("- Continue monitoring key financial ratios quarterly")
            st.write("- Maintain current debt management practices")
            st.write("- Consider strategic growth opportunities")
            st.write("- Implement early warning systems for potential financial deterioration")
            
    except Exception as e:
        st.error(f"Error making prediction: {e}")

# Add information about the model and features
with st.expander("About the Model and Features"):
    st.write("""
    This predictor uses a machine learning model trained on company financial data. The model predicts bankruptcy risk based on these financial ratios:
    
    - **Borrowing dependency**: Measures a company's reliance on borrowed funds (loans or credit) to finance its operations.
    - **Current Liability to Current Assets**: Compares obligations due within one year to assets expected to be converted into cash within one year.
    - **Debt ratio %**: Compares total debt to total assets, indicating the proportion of assets financed by debt.
    - **Net Income to Stockholder's Equity**: Also known as ROE, measures profitability relative to shareholders' equity.
    - **Net Value Per Share (A)**: Measure of company's net assets divided by total outstanding shares.
    - **Net profit before tax/Paid-in capital**: Compares net profit before tax to paid-in capital.
    - **Operating Gross Margin**: Measures profitability of core operations (revenue minus COGS divided by revenue).
    - **Per Share Net profit before tax (Yuan Â¥)**: Net profit before tax divided by total outstanding shares.
    - **Persistent EPS in the Last Four Seasons**: Average earnings per share over past four fiscal quarters.
    - **ROA(A) before interest and % after tax**: Return on assets before interest expenses and taxes.
    - **Working Capital to Total Assets**: Compares working capital to total assets.
    
    The model was trained on historical company financial data and evaluates how these factors influence bankruptcy risk.
    """)

# Footer
st.markdown("---")
st.markdown("Company Bankruptcy Predictor | Built with Streamlit")